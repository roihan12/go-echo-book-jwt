// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	entity "echo-book/entity"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// AllBook provides a mock function with given fields:
func (_m *BookRepository) AllBook() []entity.Book {
	ret := _m.Called()

	var r0 []entity.Book
	if rf, ok := ret.Get(0).(func() []entity.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	return r0
}

// DeleteBook provides a mock function with given fields: b
func (_m *BookRepository) DeleteBook(b entity.Book) {
	_m.Called(b)
}

// FindBookByID provides a mock function with given fields: bookID
func (_m *BookRepository) FindBookByID(bookID uint64) entity.Book {
	ret := _m.Called(bookID)

	var r0 entity.Book
	if rf, ok := ret.Get(0).(func(uint64) entity.Book); ok {
		r0 = rf(bookID)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	return r0
}

// InsertBook provides a mock function with given fields: b
func (_m *BookRepository) InsertBook(b entity.Book) entity.Book {
	ret := _m.Called(b)

	var r0 entity.Book
	if rf, ok := ret.Get(0).(func(entity.Book) entity.Book); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	return r0
}

// UpdateBook provides a mock function with given fields: b
func (_m *BookRepository) UpdateBook(b entity.Book) entity.Book {
	ret := _m.Called(b)

	var r0 entity.Book
	if rf, ok := ret.Get(0).(func(entity.Book) entity.Book); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	return r0
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
